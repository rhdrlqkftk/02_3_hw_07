ï»¿import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
public class Solution {
    static int N, W, H, Min;
    static int map[][];
     
    static int dx[] = { 1, 0, -1, 0 };
    static int dy[] = { 0, -1, 0, 1 };
    static class pair 
    {
        int x;
        int y;
        int k; 
        pair(int rx, int ry, int rk) {
            x = rx;
            y = ry;
            k = rk;
        }
    }
    // íë¥¼ ë§ë¤ì´ì¤ .
    static boolean boundary(int x, int y) {
        if (x <= 0 || y <= 0 || x > H || y > W) {
            return false;
        }
        return true;
    }
static void gravity() 
    {
        for (int j = 1; j <= W; j++) 
        {
            int index = H;
            for (int i = H; i >= 1; i--) 
            {
                if (map[i][j] != 0) 
                {
                    int tmp = map[i][j]; 
                    map[i][j] = 0;
                    map[index][j] = tmp;// ìì ê·¸ê°ì ë£ì´ì£¼ê³  
                    index--;
                }
            }
        }
        return;
    }
    static void bfs(int y) 
    {
        int tx = 1;
        while (true) 
        {
            if (map[tx][y] != 0) 
            {
                Queue<pair> q = new LinkedList<pair>();
                q.add(new pair(tx, y, map[tx][y]));
                while (!q.isEmpty()) 
                {
                    pair goal = q.poll();
                    map[goal.x][goal.y] = 0;
                    for (int g = 1; g < goal.k; g++) 
                    {
                        for (int i = 0; i < 4; i++) 
                        {
                            int nx = goal.x + g*dx[i];
                            int ny = goal.y + g*dy[i];
                            if (!boundary(nx, ny)) continue;
                            if(map[nx][ny] == 1) {map[nx][ny] =0;}
                            else if (map[nx][ny] != 0) 
                            {
                                q.add(new pair(nx, ny, map[nx][ny]));
                            }
                        }
                    }   
                }
                gravity();
                return;
            }
            else
            {
                tx += 1;
                if( tx > H)
                {
                    break;
                }
            }           
        }
         
        return;
    }
 
    static void select(int cnt) 
    {
        if (cnt == N) 
        {
            int res = 0;
            for (int i = 1; i <= H; i++) 
            {
                for (int j = 1; j <= W; j++) 
                {
                    if (map[i][j] != 0) 
                    {
                        res++;
                    }
                }
            }
            if (res < Min) 
            {
                Min = res;
            }
            return;
        }
        int tmp[][] = new int[H + 1][W + 1];
         
        for (int i = 1; i <= H; i++) 
        {
            for (int j = 1; j <= W; j++) 
            {
                tmp[i][j] = map[i][j];
            }
        }
 
        for(int c =1 ; c<= W;c++)
        {           
            bfs(c);
            select(cnt + 1);    
            for (int i = 1; i <= H; i++) 
            {
                for (int j = 1; j <= W; j++) 
                {
                    map[i][j] = tmp[i][j];
                }
            }
        }
         
    }
 
    public static void main(String[] args) throws Exception 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int T = Integer.parseInt(st.nextToken());
         
        for (int test = 1; test <= T; test++) 
        {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            W = Integer.parseInt(st.nextToken());
            H = Integer.parseInt(st.nextToken());
 
            Min = Integer.MAX_VALUE;
            map = new int[H + 1][W + 1];
            for (int i = 1; i <= H; i++) {
                st = new StringTokenizer(br.readLine());
                for (int j = 1; j <= W; j++) 
                {
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }
            select(0);      
            System.out.println("#" + test + " "+ Min );
        }
    }
 
}