ï»¿import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
// 3ì 38ë¶ ìì. 
public class Main {
	static int energe[][]; 
	static int Map[][]; 
	static int N, M, K; 
	static int dx[] = {0,1, 0,-1, 1,-1, -1, 1 }; 
	static int dy[] = {1,0,-1, 0, 1, 1, -1,-1 };  
	static boolean boundary(int x, int y)
	{
		if( x <= 0 || y <= 0 || x > N || y > N)
		{
			return false; 
		}
		return true;
	}
	static class pair implements Comparable<pair>
	{
		int x; 
		int y; 
		int age; 
		boolean live; 
		pair(int x1, int y1, int age1, boolean li)
		{
			x = x1; 
			y = y1;
			age = age1; 
			live = li;
		}
		@Override
		public int compareTo(pair o) {
			// TODO Auto-generated method stub
			return -(this.age - o.age);
		}
	}
	static List<pair> l = new ArrayList<>();
	static void live_tree()
	{
		int k =0;	
		Collections.sort(l);
		while( k< K) 
		{
			int x, y ,s ; 
			int idx =l.size()-1;
			int chk_r[] = new int[10000];
			int chk_count=0;
			int chk_fall[] = new int[10000];
			int fall_count=0;
			for(int i =idx ; i >=0;i--)
			{
				x =  l.get(i).x; 
				y =  l.get(i).y;
				s =  l.get(i).age;
				if( Map[x][y]>= s)
				{
					Map[x][y] -=s;
					l.get(i).age = s+1;
					if( (s+1)%5==0)
					{
						chk_fall[fall_count++]= i;
					}
				}
				else
				{
					l.get(i).live =false;
					chk_r[chk_count++] =i;
				}				
			}
		
			for(int i=0;i < chk_count;i++)
			{
				int kk = chk_r[i];
				x =  l.get(kk).x; 
				y =  l.get(kk).y;
				s =  l.get(kk).age;
 				if(l.get(kk).live ==false)
				{
					int gd = s/2 ;
					Map[x][y] += gd;
				}
			}
			// ê°ì 
			
			idx = l.size()-1;
			for(int i =0 ; i<fall_count;i++)
			{
				int kk = chk_fall[i];
				x =  l.get(kk).x; 
				y =  l.get(kk).y;
				s =  l.get(kk).age;
				if( s % 5 ==0)
				{
					for(int t =0 ; t< 8; t++)
					{
						int nx = x+ dx[t];
						int ny = y+ dy[t];
						if( !boundary(nx,ny))continue;  
						l.add(new pair( nx, ny, 1, true));
					}
				}
			}
			// ê²¨ì¸.
			for(int i =1; i<= N; i++)
			{
				for(int j =1 ; j <= N ;j++) 
				{
					Map[i][j] +=  energe[i][j];
				}
			}
			for(int i =idx; i>= 0; i--)
			{
				if( l.get(i).live ==false)
				{
					l.remove(i);
				}
			}
			k++;
		}
	}
	
	public static void main(String[] args) throws IOException 
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		energe = new int[N+1][N+1];
		Map = new int[N+1][N+1];
		
		int x, y, age; 
		for(int i =1; i<= N; i++)
		{
			st = new StringTokenizer(br.readLine());
			for(int j =1 ; j <= N ;j++) 
			{
				Map[i][j] =5;
				energe[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		for(int i =0 ; i<M; i++)
		{
			st = new StringTokenizer(br.readLine());			
			
			x = Integer.parseInt(st.nextToken());
			y = Integer.parseInt(st.nextToken());
			age = Integer.parseInt(st.nextToken());
			l.add(new pair( x, y, age, true));
		}
		live_tree(); 
		System.out.println( l.size() );
	}
}