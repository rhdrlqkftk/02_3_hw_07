#include<iostream>

using namespace std; 

int N, sx, sy, jc;

int Map[100][100];

int dx[4] = { -1,0,1, 0 };

int dy[4] = { 0,1,0 ,-1 };

int flag = 0;

bool boundary(int x, int y)

{

	if (x < 0 || y < 0 || x >= N || y >= N || (Map[x][y] ==2))

	{

		return false;

	}

	else

	{

		return true; 

	}

}

void make(int dir, int move)

{

	int c = 0;

	while (c < move) //5¶ó¸é,. 

	{

		sx = sx + dx[dir-1];

		sy = sy + dy[dir-1];

		if (boundary(sx, sy) == false )

		{

			sx = 0;

			sy = 0;

			flag = 1;

			break;

		}

		c++;

	}

}

int main()

{

	//¹è¿­ Å©±â, Ãâ¹ßÁ¡ ÁÂÇ¥, Á¡ÆÛ °¹¼ö. 

	//Á¡ÆÛÀÇ ÁÂÇ¥¸¦ 2·Î Ç¥½ÃÇÏÀÚ. 

	cin >> N >> sx >> sy >> jc; 

	for (int i = 1; i <= N; i++)

	{

		for (int j = 1; j <= N; j++)

		{

			Map[i][j] = 0;

		}

	}

	int r, c; 

	for (int i = 0; i < jc; i++)

	{

		cin >> r >> c;

		Map[r][c] = 2;

	}

	int dir_move; 

	int d, m; 

	cin >> dir_move;

	flag = 0;

	for (int i = 0; i < dir_move; i++)

	{

		cin >> d>> m;

		if (flag == 1)break;

		make(d, m);

	}

	cout << sx <<" "<< sy; 

}